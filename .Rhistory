result <- rbind(result,cor(dat$sulfate, dat$nitrate,use = "everything"))
}
}
## Return a numeric vector of correlations
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
source("complete.R")
allfiles <- list.files(directory,full.names=T)
nobs<-complete(directory)
len<-length(nobs$id)
result<-data.frame()
#print(nobs)
for (i in 1:len){
if (nobs$nobs[i]>=threshold){
dat<-read.csv(allfiles[i])
dat<-dat[complete.cases(dat),]
result <- rbind(result,cor(dat$sulfate, dat$nitrate,use = "everything"))
}
}
## Return a numeric vector of correlations
result
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
source("complete.R")
allfiles <- list.files(directory,full.names=T)
nobs<-complete(directory)
len<-length(nobs$id)
result<-data.frame()
#print(nobs)
for (i in 1:len){
if (nobs$nobs[i]>=threshold){
dat<-read.csv(allfiles[i])
dat<-dat[complete.cases(dat),]
result <- cbind(result,cor(dat$sulfate, dat$nitrate,use = "everything"))
}
}
## Return a numeric vector of correlations
result
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
source("complete.R")
allfiles <- list.files(directory,full.names=T)
nobs<-complete(directory)
len<-length(nobs$id)
result<-data.frame()
#print(nobs)
for (i in 1:len){
if (nobs$nobs[i]>=threshold){
dat<-read.csv(allfiles[i])
dat<-dat[complete.cases(dat),]
result <- cbind(result,cor(dat$sulfate, dat$nitrate,use = "everything"))
}
}
## Return a numeric vector of correlations
result
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
source("complete.R")
allfiles <- list.files(directory,full.names=T)
nobs<-complete(directory)
len<-length(nobs$id)
result<-data.frame()
#print(nobs)
for (i in 1:len){
if (nobs$nobs[i]>=threshold){
dat<-read.csv(allfiles[i])
dat<-dat[complete.cases(dat),]
result <- rbind(result,cor(dat$sulfate, dat$nitrate,use = "everything"))
}
}
## Return a numeric vector of correlations
result
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
source("submitscript1.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit
submit()
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
source("complete.R")
allfiles <- list.files(directory,full.names=T)
nobs<-complete(directory)
len<-length(nobs$id)
result<-data.frame()
#print(nobs)
for (i in 1:len){
if (nobs$nobs[i]>=threshold){
dat<-read.csv(allfiles[i])
dat<-dat[complete.cases(dat),]
result <- rbind(result,cor(dat$sulfate, dat$nitrate,use = "everything"))
}
}
## Return a numeric vector of correlations
result
}
cr <- corr("specdata", 150)
print(class(cr))
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
source("complete.R")
allfiles <- list.files(directory,full.names=T)
nobs<-complete(directory)
len<-length(nobs$id)
result<-vector()
#print(nobs)
for (i in 1:len){
if (nobs$nobs[i]>=threshold){
dat<-read.csv(allfiles[i])
dat<-dat[complete.cases(dat),]
result <- rbind(result,cor(dat$sulfate, dat$nitrate,use = "everything"))
}
}
## Return a numeric vector of correlations
result
}
cr <- corr("specdata", 150)
print(class(cr))
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
source("complete.R")
allfiles <- list.files(directory,full.names=T)
nobs<-complete(directory)
len<-length(nobs$id)
result<-vector()
#print(nobs)
for (i in 1:len){
if (nobs$nobs[i]>=threshold){
dat<-read.csv(allfiles[i])
dat<-dat[complete.cases(dat),]
result <- rbind(result,cor(dat$sulfate, dat$nitrate,use = "everything"))
}
}
## Return a numeric vector of correlations
result
}
cr <- corr("specdata", 150)
#print(class(cr))
head(cr)
summary(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
source("complete.R")
allfiles <- list.files(directory,full.names=T)
nobs<-complete(directory)
len<-length(nobs$id)
result<-vector()
#print(nobs)
for (i in 1:len){
if (nobs$nobs[i]>=threshold){
dat<-read.csv(allfiles[i])
dat<-dat[complete.cases(dat),]
result <- rbind(result,cor(dat$sulfate, dat$nitrate,use = "everything"))
}
}
## Return a numeric vector of correlations
result<-sapply(result[1], as.numeric)
}
cr <- corr("specdata", 150)
print(class(cr))
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
source("complete.R")
allfiles <- list.files(directory,full.names=T)
nobs<-complete(directory)
len<-length(nobs$id)
result<-vector()
#print(nobs)
for (i in 1:len){
if (nobs$nobs[i]>=threshold){
dat<-read.csv(allfiles[i])
dat<-dat[complete.cases(dat),]
result <- rbind(result,cor(dat$sulfate, dat$nitrate,use = "everything"))
}
}
## Return a numeric vector of correlations
result<-sapply(result[1], as.numeric)
}
cr <- corr("specdata", 150)
print(class(cr))
head(cr)
summary(cr)
submit
submit()
submit()
corr <- function(directory, threshold = 0) {
}
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
source("complete.R")
allfiles <- list.files(directory,full.names=T)
nobs<-complete(directory)
len<-length(nobs$id)
result<-vector()
#print(nobs)
for (i in 1:len){
if (nobs$nobs[i]>=threshold){
dat<-read.csv(allfiles[i])
dat<-dat[complete.cases(dat),]
result <- rbind(result,cor(dat$sulfate, dat$nitrate,use = "everything"))
}
}
## Return a numeric vector of correlations
result<-sapply(result, as.numeric)
}
cr <- corr("specdata", 400)
head(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
source("complete.R")
allfiles <- list.files(directory,full.names=T)
nobs<-complete(directory)
len<-length(nobs$id)
result<-vector()
#print(nobs)
for (i in 1:len){
if (nobs$nobs[i]>threshold){
dat<-read.csv(allfiles[i])
dat<-dat[complete.cases(dat),]
result <- rbind(result,cor(dat$sulfate, dat$nitrate,use = "everything"))
}
}
## Return a numeric vector of correlations
result<-sapply(result, as.numeric)
}
#cr <- corr("specdata", 150)
#print(class(cr))
#head(cr)
#summary(cr)
cr <- corr("specdata", 400)
head(cr)
submit()
submit()
submit()
m<-matrix(c(1,2,3,4,5,6), row=3, col=2)
m
m<-matrix(c(1,2,3,4,5,6), nrow=3)
m
solve(m)
m<-matrix(c(1,2,3,4,5,6,7,8.9), nrow=3)
m<-matrix(c(1,2,3,4,5,6,7,8,9), nrow=3)
m
solve(m)
mean(m)
m$getmean
m$getmean()
n<-m$getmean()
setwd("D:/cursos/DataScienceSpecialization/R Programming/prog2/ProgrammingAssignment2")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
m<- c(1,2,3,4)
cachemean(m)
makeVector()$set(c(1,2,3))
v<-makeVector()$set(c(1,2,3))
v
v$getmean()
v<-makevector()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
v<-makevector()
makevector()$get()
makevector
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makevector
makeVector
v<-makeVector()
v
v$get()
v$set(c(1,2,3,4))
v$getmean()
cachemean()
cachemean(v)
cachemean(v)
mt<-(c(2,0,1,3,0,0,5,1,1) nrows=3)
mt<-(c(2,0,1,3,0,0,5,1,1, nrows=3))
mt
mt<-(c(2,0,1,3,0,0,5,1,1), nrows=3))
mt<-matrix(c(2,0,1,3,0,0,5,1,1), nrows=3)
mt<-matrix(c(2,0,1,3,0,0,5,1,1), nrow=3)
mt
solve(mt)
mt<-matrix(c(2,3,5,0,0,1,1,0,1), nrow=3)
solve(mt)
x<-makeCacheMatrix(mt)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse<-NULL
set <- function(mtx) {
internmatrix <<- mtx
inverse <<- NULL
}
get <- function() internmatrix
setinverse <- function(solve) inverse <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
x<-makeCacheMatrix(mt)
x
x$get()
x<-makeCacheMatrix()
x$set(mt)
x
x$get()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data)
x$setinverse(inverse)
inverse
}
cachesolve(mt)
cacheSolve(mt)
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse<-NULL
set <- function(mtx) {
internmatrix <<- mtx
inverse <<- NULL
}
get <- function() internmatrix
setinverse <- function(solve) inverse <<- solve
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse<-NULL
set <- function(mtx) {
internmatrix <<- mtx
inverse <<- NULL
}
get <- function() internmatrix
setinverse <- function(solve) inverse <<- solve
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$setinverse(inverse)
inverse
}
x<-makeCacheMatrix()
mt<-matrix(c(2,3,5,0,0,1,1,0,1), nrow=3)
x$set(mt)
cacheSolve(x)
cacheSolve(x)
